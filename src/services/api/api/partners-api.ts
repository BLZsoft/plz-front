/* tslint:disable */
/* eslint-disable */
/**
 * Новосибирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: evist0@dblade.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePartnerDto } from '../models';
// @ts-ignore
import { PaginationDto } from '../models';
// @ts-ignore
import { PartnerEntity } from '../models';
// @ts-ignore
import { PartnersControllerCreate400Response } from '../models';
// @ts-ignore
import { PartnersControllerFind200Response } from '../models';
// @ts-ignore
import { PartnersControllerFind400Response } from '../models';
// @ts-ignore
import { PartnersControllerFind403Response } from '../models';
// @ts-ignore
import { PartnersControllerFindOne404Response } from '../models';
// @ts-ignore
import { PartnersSortingDto } from '../models';
// @ts-ignore
import { UpdatePartnerDto } from '../models';
// @ts-ignore
import { UploadControllerUpload401Response } from '../models';
/**
 * PartnersApi - axios parameter creator
 * @export
 */
export const PartnersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создает новый объект
         * @param {CreatePartnerDto} createPartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerCreate: async (createPartnerDto: CreatePartnerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPartnerDto' is not null or undefined
            // TODO найти время и перепилить на объект
            // assertParamExists('partnersControllerCreate', 'createPartnerDto', createPartnerDto)
            const localVarPath = `/objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPartnerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает список партнёров.
         * @param {PaginationDto} [pagination] 
         * @param {PartnersSortingDto} [sorting] 
         * @param {string} [name] 
         * @param {string} [url] 
         * @param {string} [phone] 
         * @param {'true' | 'false'} [servicePartner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFind: async (pagination?: PaginationDto, sorting?: PartnersSortingDto, name?: string, url?: string, phone?: string, servicePartner?: 'true' | 'false', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['sorting'] = sorting;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (servicePartner !== undefined) {
                localVarQueryParameter['servicePartner'] = servicePartner;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerFindOne', 'id', id)
            const localVarPath = `/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerRemove', 'id', id)
            const localVarPath = `/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет указанного партнёра.
         * @param {string} id 
         * @param {UpdatePartnerDto} updatePartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerUpdate: async (id: string, updatePartnerDto: UpdatePartnerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerUpdate', 'id', id)
            // verify required parameter 'updatePartnerDto' is not null or undefined
            // assertParamExists('partnersControllerUpdate', 'updatePartnerDto', updatePartnerDto)
            const localVarPath = `/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePartnerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnersApi - functional programming interface
 * @export
 */
export const PartnersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создает нового партнёра.
         * @param {CreatePartnerDto} createPartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerCreate(createPartnerDto: CreatePartnerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerCreate(createPartnerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает список партнёров.
         * @param {PaginationDto} [pagination] 
         * @param {PartnersSortingDto} [sorting] 
         * @param {string} [name] 
         * @param {string} [url] 
         * @param {string} [phone] 
         * @param {'true' | 'false'} [servicePartner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerFind(pagination?: PaginationDto, sorting?: PartnersSortingDto, name?: string, url?: string, phone?: string, servicePartner?: 'true' | 'false', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnersControllerFind200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerFind(pagination, sorting, name, url, phone, servicePartner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаляет указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Обновляет указанного партнёра.
         * @param {string} id 
         * @param {UpdatePartnerDto} updatePartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerUpdate(id: string, updatePartnerDto: UpdatePartnerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerUpdate(id, updatePartnerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartnersApi - factory interface
 * @export
 */
export const PartnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnersApiFp(configuration)
    return {
        /**
         * 
         * @summary Создает нового партнёра.
         * @param {PartnersApiPartnersControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerCreate(requestParameters: PartnersApiPartnersControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerCreate(requestParameters.createPartnerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает список партнёров.
         * @param {PartnersApiPartnersControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFind(requestParameters: PartnersApiPartnersControllerFindRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PartnersControllerFind200Response> {
            return localVarFp.partnersControllerFind(requestParameters.pagination, requestParameters.sorting, requestParameters.name, requestParameters.url, requestParameters.phone, requestParameters.servicePartner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает указанного партнёра.
         * @param {PartnersApiPartnersControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFindOne(requestParameters: PartnersApiPartnersControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет указанного партнёра.
         * @param {PartnersApiPartnersControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerRemove(requestParameters: PartnersApiPartnersControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет указанного партнёра.
         * @param {PartnersApiPartnersControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerUpdate(requestParameters: PartnersApiPartnersControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerUpdate(requestParameters.id, requestParameters.updatePartnerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partnersControllerCreate operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerCreateRequest
 */
export interface PartnersApiPartnersControllerCreateRequest {
    /**
     * 
     * @type {CreatePartnerDto}
     * @memberof PartnersApiPartnersControllerCreate
     */
    readonly createPartnerDto: CreatePartnerDto
}

/**
 * Request parameters for partnersControllerFind operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerFindRequest
 */
export interface PartnersApiPartnersControllerFindRequest {
    /**
     * 
     * @type {PaginationDto}
     * @memberof PartnersApiPartnersControllerFind
     */
    readonly pagination?: PaginationDto

    /**
     * 
     * @type {PartnersSortingDto}
     * @memberof PartnersApiPartnersControllerFind
     */
    readonly sorting?: PartnersSortingDto

    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerFind
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerFind
     */
    readonly url?: string

    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerFind
     */
    readonly phone?: string

    /**
     * 
     * @type {'true' | 'false'}
     * @memberof PartnersApiPartnersControllerFind
     */
    readonly servicePartner?: 'true' | 'false'
}

/**
 * Request parameters for partnersControllerFindOne operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerFindOneRequest
 */
export interface PartnersApiPartnersControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for partnersControllerRemove operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerRemoveRequest
 */
export interface PartnersApiPartnersControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for partnersControllerUpdate operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerUpdateRequest
 */
export interface PartnersApiPartnersControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdatePartnerDto}
     * @memberof PartnersApiPartnersControllerUpdate
     */
    readonly updatePartnerDto: UpdatePartnerDto
}

/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
export class PartnersApi extends BaseAPI {
    /**
     * 
     * @summary Создает нового партнёра.
     * @param {PartnersApiPartnersControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerCreate(requestParameters: PartnersApiPartnersControllerCreateRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerCreate(requestParameters.createPartnerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает список партнёров.
     * @param {PartnersApiPartnersControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerFind(requestParameters: PartnersApiPartnersControllerFindRequest = {}, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerFind(requestParameters.pagination, requestParameters.sorting, requestParameters.name, requestParameters.url, requestParameters.phone, requestParameters.servicePartner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает указанного партнёра.
     * @param {PartnersApiPartnersControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerFindOne(requestParameters: PartnersApiPartnersControllerFindOneRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет указанного партнёра.
     * @param {PartnersApiPartnersControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerRemove(requestParameters: PartnersApiPartnersControllerRemoveRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет указанного партнёра.
     * @param {PartnersApiPartnersControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerUpdate(requestParameters: PartnersApiPartnersControllerUpdateRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerUpdate(requestParameters.id, requestParameters.updatePartnerDto, options).then((request) => request(this.axios, this.basePath));
    }
}
