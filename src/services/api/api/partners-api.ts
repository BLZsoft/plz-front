/* tslint:disable */
/* eslint-disable */
/**
 * Пожликбез APIирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: kurskatm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePartnerDto } from '../models';
// @ts-ignore
import { PartnerEntity } from '../models';
// @ts-ignore
import { PartnersControllerFindAll200Response } from '../models';
// @ts-ignore
import { PartnersControllerFindAll401Response } from '../models';
// @ts-ignore
import { PartnersControllerFindAll403Response } from '../models';
// @ts-ignore
import { PartnersControllerFindOne404Response } from '../models';
// @ts-ignore
import { UpdatePartnerDto } from '../models';
/**
 * PartnersApi - axios parameter creator
 * @export
 */
export const PartnersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создает нового партнёра.
         * @param {CreatePartnerDto} createPartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerCreate: async (createPartnerDto: CreatePartnerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPartnerDto' is not null or undefined
            assertParamExists('partnersControllerCreate', 'createPartnerDto', createPartnerDto)
            const localVarPath = `/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPartnerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает список партнёров.
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFindAll: async (skip?: number, take?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerFindOne', 'id', id)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerRemove', 'id', id)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет указанного партнёра.
         * @param {string} id 
         * @param {UpdatePartnerDto} updatePartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerUpdate: async (id: string, updatePartnerDto: UpdatePartnerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerUpdate', 'id', id)
            // verify required parameter 'updatePartnerDto' is not null or undefined
            assertParamExists('partnersControllerUpdate', 'updatePartnerDto', updatePartnerDto)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePartnerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Загружает логотип партнёру.
         * @param {string} id 
         * @param {File} logo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerUploadLogo: async (id: string, logo: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partnersControllerUploadLogo', 'id', id)
            // verify required parameter 'logo' is not null or undefined
            assertParamExists('partnersControllerUploadLogo', 'logo', logo)
            const localVarPath = `/partners/{id}/avatar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnersApi - functional programming interface
 * @export
 */
export const PartnersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создает нового партнёра.
         * @param {CreatePartnerDto} createPartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerCreate(createPartnerDto: CreatePartnerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerCreate(createPartnerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает список партнёров.
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerFindAll(skip?: number, take?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnersControllerFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerFindAll(skip, take, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаляет указанного партнёра.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Обновляет указанного партнёра.
         * @param {string} id 
         * @param {UpdatePartnerDto} updatePartnerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerUpdate(id: string, updatePartnerDto: UpdatePartnerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerUpdate(id, updatePartnerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Загружает логотип партнёру.
         * @param {string} id 
         * @param {File} logo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partnersControllerUploadLogo(id: string, logo: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partnersControllerUploadLogo(id, logo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartnersApi - factory interface
 * @export
 */
export const PartnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnersApiFp(configuration)
    return {
        /**
         * 
         * @summary Создает нового партнёра.
         * @param {PartnersApiPartnersControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerCreate(requestParameters: PartnersApiPartnersControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerCreate(requestParameters.createPartnerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает список партнёров.
         * @param {PartnersApiPartnersControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFindAll(requestParameters: PartnersApiPartnersControllerFindAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PartnersControllerFindAll200Response> {
            return localVarFp.partnersControllerFindAll(requestParameters.skip, requestParameters.take, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает указанного партнёра.
         * @param {PartnersApiPartnersControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerFindOne(requestParameters: PartnersApiPartnersControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет указанного партнёра.
         * @param {PartnersApiPartnersControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerRemove(requestParameters: PartnersApiPartnersControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет указанного партнёра.
         * @param {PartnersApiPartnersControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerUpdate(requestParameters: PartnersApiPartnersControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerEntity> {
            return localVarFp.partnersControllerUpdate(requestParameters.id, requestParameters.updatePartnerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Загружает логотип партнёру.
         * @param {PartnersApiPartnersControllerUploadLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnersControllerUploadLogo(requestParameters: PartnersApiPartnersControllerUploadLogoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.partnersControllerUploadLogo(requestParameters.id, requestParameters.logo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partnersControllerCreate operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerCreateRequest
 */
export interface PartnersApiPartnersControllerCreateRequest {
    /**
     * 
     * @type {CreatePartnerDto}
     * @memberof PartnersApiPartnersControllerCreate
     */
    readonly createPartnerDto: CreatePartnerDto
}

/**
 * Request parameters for partnersControllerFindAll operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerFindAllRequest
 */
export interface PartnersApiPartnersControllerFindAllRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnersApiPartnersControllerFindAll
     */
    readonly skip?: number

    /**
     * 
     * @type {number}
     * @memberof PartnersApiPartnersControllerFindAll
     */
    readonly take?: number
}

/**
 * Request parameters for partnersControllerFindOne operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerFindOneRequest
 */
export interface PartnersApiPartnersControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for partnersControllerRemove operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerRemoveRequest
 */
export interface PartnersApiPartnersControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for partnersControllerUpdate operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerUpdateRequest
 */
export interface PartnersApiPartnersControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdatePartnerDto}
     * @memberof PartnersApiPartnersControllerUpdate
     */
    readonly updatePartnerDto: UpdatePartnerDto
}

/**
 * Request parameters for partnersControllerUploadLogo operation in PartnersApi.
 * @export
 * @interface PartnersApiPartnersControllerUploadLogoRequest
 */
export interface PartnersApiPartnersControllerUploadLogoRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnersApiPartnersControllerUploadLogo
     */
    readonly id: string

    /**
     * 
     * @type {File}
     * @memberof PartnersApiPartnersControllerUploadLogo
     */
    readonly logo: File
}

/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
export class PartnersApi extends BaseAPI {
    /**
     * 
     * @summary Создает нового партнёра.
     * @param {PartnersApiPartnersControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerCreate(requestParameters: PartnersApiPartnersControllerCreateRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerCreate(requestParameters.createPartnerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает список партнёров.
     * @param {PartnersApiPartnersControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerFindAll(requestParameters: PartnersApiPartnersControllerFindAllRequest = {}, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerFindAll(requestParameters.skip, requestParameters.take, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает указанного партнёра.
     * @param {PartnersApiPartnersControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerFindOne(requestParameters: PartnersApiPartnersControllerFindOneRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет указанного партнёра.
     * @param {PartnersApiPartnersControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerRemove(requestParameters: PartnersApiPartnersControllerRemoveRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет указанного партнёра.
     * @param {PartnersApiPartnersControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerUpdate(requestParameters: PartnersApiPartnersControllerUpdateRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerUpdate(requestParameters.id, requestParameters.updatePartnerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Загружает логотип партнёру.
     * @param {PartnersApiPartnersControllerUploadLogoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public partnersControllerUploadLogo(requestParameters: PartnersApiPartnersControllerUploadLogoRequest, options?: AxiosRequestConfig) {
        return PartnersApiFp(this.configuration).partnersControllerUploadLogo(requestParameters.id, requestParameters.logo, options).then((request) => request(this.axios, this.basePath));
    }
}
