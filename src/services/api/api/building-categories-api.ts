/* tslint:disable */
/* eslint-disable */
/**
 * Новосибирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: evist0@dblade.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BuildingCategoriesControllerFind200Response } from '../models';
// @ts-ignore
import { BuildingCategoriesControllerFindOne404Response } from '../models';
// @ts-ignore
import { BuildingCategoriesSortingDto } from '../models';
// @ts-ignore
import { BuildingCategoryEntity } from '../models';
// @ts-ignore
import { CreateBuildingCategoryDto } from '../models';
// @ts-ignore
import { PaginationDto } from '../models';
// @ts-ignore
import { PartnersControllerFind400Response } from '../models';
// @ts-ignore
import { PartnersControllerFind403Response } from '../models';
// @ts-ignore
import { UpdateBuildingCategoryDto } from '../models';
// @ts-ignore
import { UploadControllerUpload401Response } from '../models';
/**
 * BuildingCategoriesApi - axios parameter creator
 * @export
 */
export const BuildingCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создает новую категорию филиалов.
         * @param {CreateBuildingCategoryDto} createBuildingCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerCreate: async (createBuildingCategoryDto: CreateBuildingCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBuildingCategoryDto' is not null or undefined
            assertParamExists('buildingCategoriesControllerCreate', 'createBuildingCategoryDto', createBuildingCategoryDto)
            const localVarPath = `/building-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBuildingCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает список категорий филиалов.
         * @param {PaginationDto} [pagination] 
         * @param {BuildingCategoriesSortingDto} [sorting] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerFind: async (pagination?: PaginationDto, sorting?: BuildingCategoriesSortingDto, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/building-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['sorting'] = sorting;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает указанную категорию филиалов.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buildingCategoriesControllerFindOne', 'id', id)
            const localVarPath = `/building-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет указанную категорию филиалов.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buildingCategoriesControllerRemove', 'id', id)
            const localVarPath = `/building-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет указанную категорию филиалов.
         * @param {string} id 
         * @param {UpdateBuildingCategoryDto} updateBuildingCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerUpdate: async (id: string, updateBuildingCategoryDto: UpdateBuildingCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buildingCategoriesControllerUpdate', 'id', id)
            // verify required parameter 'updateBuildingCategoryDto' is not null or undefined
            assertParamExists('buildingCategoriesControllerUpdate', 'updateBuildingCategoryDto', updateBuildingCategoryDto)
            const localVarPath = `/building-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBuildingCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildingCategoriesApi - functional programming interface
 * @export
 */
export const BuildingCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildingCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создает новую категорию филиалов.
         * @param {CreateBuildingCategoryDto} createBuildingCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesControllerCreate(createBuildingCategoryDto: CreateBuildingCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingCategoryEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesControllerCreate(createBuildingCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает список категорий филиалов.
         * @param {PaginationDto} [pagination] 
         * @param {BuildingCategoriesSortingDto} [sorting] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesControllerFind(pagination?: PaginationDto, sorting?: BuildingCategoriesSortingDto, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingCategoriesControllerFind200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesControllerFind(pagination, sorting, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает указанную категорию филиалов.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingCategoryEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаляет указанную категорию филиалов.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingCategoryEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Обновляет указанную категорию филиалов.
         * @param {string} id 
         * @param {UpdateBuildingCategoryDto} updateBuildingCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesControllerUpdate(id: string, updateBuildingCategoryDto: UpdateBuildingCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingCategoryEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesControllerUpdate(id, updateBuildingCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BuildingCategoriesApi - factory interface
 * @export
 */
export const BuildingCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildingCategoriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Создает новую категорию филиалов.
         * @param {BuildingCategoriesApiBuildingCategoriesControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerCreate(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingCategoryEntity> {
            return localVarFp.buildingCategoriesControllerCreate(requestParameters.createBuildingCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает список категорий филиалов.
         * @param {BuildingCategoriesApiBuildingCategoriesControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerFind(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerFindRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BuildingCategoriesControllerFind200Response> {
            return localVarFp.buildingCategoriesControllerFind(requestParameters.pagination, requestParameters.sorting, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает указанную категорию филиалов.
         * @param {BuildingCategoriesApiBuildingCategoriesControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerFindOne(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingCategoryEntity> {
            return localVarFp.buildingCategoriesControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет указанную категорию филиалов.
         * @param {BuildingCategoriesApiBuildingCategoriesControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerRemove(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingCategoryEntity> {
            return localVarFp.buildingCategoriesControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет указанную категорию филиалов.
         * @param {BuildingCategoriesApiBuildingCategoriesControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesControllerUpdate(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingCategoryEntity> {
            return localVarFp.buildingCategoriesControllerUpdate(requestParameters.id, requestParameters.updateBuildingCategoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buildingCategoriesControllerCreate operation in BuildingCategoriesApi.
 * @export
 * @interface BuildingCategoriesApiBuildingCategoriesControllerCreateRequest
 */
export interface BuildingCategoriesApiBuildingCategoriesControllerCreateRequest {
    /**
     * 
     * @type {CreateBuildingCategoryDto}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerCreate
     */
    readonly createBuildingCategoryDto: CreateBuildingCategoryDto
}

/**
 * Request parameters for buildingCategoriesControllerFind operation in BuildingCategoriesApi.
 * @export
 * @interface BuildingCategoriesApiBuildingCategoriesControllerFindRequest
 */
export interface BuildingCategoriesApiBuildingCategoriesControllerFindRequest {
    /**
     * 
     * @type {PaginationDto}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerFind
     */
    readonly pagination?: PaginationDto

    /**
     * 
     * @type {BuildingCategoriesSortingDto}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerFind
     */
    readonly sorting?: BuildingCategoriesSortingDto

    /**
     * 
     * @type {string}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerFind
     */
    readonly name?: string
}

/**
 * Request parameters for buildingCategoriesControllerFindOne operation in BuildingCategoriesApi.
 * @export
 * @interface BuildingCategoriesApiBuildingCategoriesControllerFindOneRequest
 */
export interface BuildingCategoriesApiBuildingCategoriesControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for buildingCategoriesControllerRemove operation in BuildingCategoriesApi.
 * @export
 * @interface BuildingCategoriesApiBuildingCategoriesControllerRemoveRequest
 */
export interface BuildingCategoriesApiBuildingCategoriesControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for buildingCategoriesControllerUpdate operation in BuildingCategoriesApi.
 * @export
 * @interface BuildingCategoriesApiBuildingCategoriesControllerUpdateRequest
 */
export interface BuildingCategoriesApiBuildingCategoriesControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateBuildingCategoryDto}
     * @memberof BuildingCategoriesApiBuildingCategoriesControllerUpdate
     */
    readonly updateBuildingCategoryDto: UpdateBuildingCategoryDto
}

/**
 * BuildingCategoriesApi - object-oriented interface
 * @export
 * @class BuildingCategoriesApi
 * @extends {BaseAPI}
 */
export class BuildingCategoriesApi extends BaseAPI {
    /**
     * 
     * @summary Создает новую категорию филиалов.
     * @param {BuildingCategoriesApiBuildingCategoriesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingCategoriesApi
     */
    public buildingCategoriesControllerCreate(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerCreateRequest, options?: AxiosRequestConfig) {
        return BuildingCategoriesApiFp(this.configuration).buildingCategoriesControllerCreate(requestParameters.createBuildingCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает список категорий филиалов.
     * @param {BuildingCategoriesApiBuildingCategoriesControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingCategoriesApi
     */
    public buildingCategoriesControllerFind(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerFindRequest = {}, options?: AxiosRequestConfig) {
        return BuildingCategoriesApiFp(this.configuration).buildingCategoriesControllerFind(requestParameters.pagination, requestParameters.sorting, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает указанную категорию филиалов.
     * @param {BuildingCategoriesApiBuildingCategoriesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingCategoriesApi
     */
    public buildingCategoriesControllerFindOne(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerFindOneRequest, options?: AxiosRequestConfig) {
        return BuildingCategoriesApiFp(this.configuration).buildingCategoriesControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет указанную категорию филиалов.
     * @param {BuildingCategoriesApiBuildingCategoriesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingCategoriesApi
     */
    public buildingCategoriesControllerRemove(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerRemoveRequest, options?: AxiosRequestConfig) {
        return BuildingCategoriesApiFp(this.configuration).buildingCategoriesControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет указанную категорию филиалов.
     * @param {BuildingCategoriesApiBuildingCategoriesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingCategoriesApi
     */
    public buildingCategoriesControllerUpdate(requestParameters: BuildingCategoriesApiBuildingCategoriesControllerUpdateRequest, options?: AxiosRequestConfig) {
        return BuildingCategoriesApiFp(this.configuration).buildingCategoriesControllerUpdate(requestParameters.id, requestParameters.updateBuildingCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}
