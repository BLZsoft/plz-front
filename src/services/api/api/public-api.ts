/* tslint:disable */
/* eslint-disable */
/**
 * Новосибирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: evist0@dblade.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FiltersDto } from '../models';
// @ts-ignore
import { GetBuildingsResultDto } from '../models';
// @ts-ignore
import { PaginationDto } from '../models';
// @ts-ignore
import { PostsSortingDto } from '../models';
// @ts-ignore
import { PublicControllerFindOne404Response } from '../models';
// @ts-ignore
import { PublicControllerPosts200Response } from '../models';
// @ts-ignore
import { PublicPostEntity } from '../models';
/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Возвращает список партнёрских зданий и бонусов.
         * @param {Array<string>} [districts] 
         * @param {Array<string>} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerBuildings: async (districts?: Array<string>, categories?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/buildings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (districts) {
                localVarQueryParameter['districts'] = districts;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает список доступных значений для фильтров.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerFilters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает указанную статью.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publicControllerFindOne', 'id', id)
            const localVarPath = `/public/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает список опубликованных статей.
         * @param {PaginationDto} [pagination] 
         * @param {PostsSortingDto} [sorting] 
         * @param {string} [title] 
         * @param {Array<string>} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerPosts: async (pagination?: PaginationDto, sorting?: PostsSortingDto, title?: string, categories?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['sorting'] = sorting;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Возвращает список партнёрских зданий и бонусов.
         * @param {Array<string>} [districts] 
         * @param {Array<string>} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicControllerBuildings(districts?: Array<string>, categories?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBuildingsResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicControllerBuildings(districts, categories, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает список доступных значений для фильтров.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicControllerFilters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FiltersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicControllerFilters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает указанную статью.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicPostEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает список опубликованных статей.
         * @param {PaginationDto} [pagination] 
         * @param {PostsSortingDto} [sorting] 
         * @param {string} [title] 
         * @param {Array<string>} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicControllerPosts(pagination?: PaginationDto, sorting?: PostsSortingDto, title?: string, categories?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicControllerPosts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicControllerPosts(pagination, sorting, title, categories, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * 
         * @summary Возвращает список партнёрских зданий и бонусов.
         * @param {PublicApiPublicControllerBuildingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerBuildings(requestParameters: PublicApiPublicControllerBuildingsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetBuildingsResultDto> {
            return localVarFp.publicControllerBuildings(requestParameters.districts, requestParameters.categories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает список доступных значений для фильтров.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerFilters(options?: AxiosRequestConfig): AxiosPromise<FiltersDto> {
            return localVarFp.publicControllerFilters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает указанную статью.
         * @param {PublicApiPublicControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerFindOne(requestParameters: PublicApiPublicControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<PublicPostEntity> {
            return localVarFp.publicControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает список опубликованных статей.
         * @param {PublicApiPublicControllerPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicControllerPosts(requestParameters: PublicApiPublicControllerPostsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PublicControllerPosts200Response> {
            return localVarFp.publicControllerPosts(requestParameters.pagination, requestParameters.sorting, requestParameters.title, requestParameters.categories, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for publicControllerBuildings operation in PublicApi.
 * @export
 * @interface PublicApiPublicControllerBuildingsRequest
 */
export interface PublicApiPublicControllerBuildingsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof PublicApiPublicControllerBuildings
     */
    readonly districts?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof PublicApiPublicControllerBuildings
     */
    readonly categories?: Array<string>
}

/**
 * Request parameters for publicControllerFindOne operation in PublicApi.
 * @export
 * @interface PublicApiPublicControllerFindOneRequest
 */
export interface PublicApiPublicControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicApiPublicControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for publicControllerPosts operation in PublicApi.
 * @export
 * @interface PublicApiPublicControllerPostsRequest
 */
export interface PublicApiPublicControllerPostsRequest {
    /**
     * 
     * @type {PaginationDto}
     * @memberof PublicApiPublicControllerPosts
     */
    readonly pagination?: PaginationDto

    /**
     * 
     * @type {PostsSortingDto}
     * @memberof PublicApiPublicControllerPosts
     */
    readonly sorting?: PostsSortingDto

    /**
     * 
     * @type {string}
     * @memberof PublicApiPublicControllerPosts
     */
    readonly title?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PublicApiPublicControllerPosts
     */
    readonly categories?: Array<string>
}

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * 
     * @summary Возвращает список партнёрских зданий и бонусов.
     * @param {PublicApiPublicControllerBuildingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicControllerBuildings(requestParameters: PublicApiPublicControllerBuildingsRequest = {}, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicControllerBuildings(requestParameters.districts, requestParameters.categories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает список доступных значений для фильтров.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicControllerFilters(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicControllerFilters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает указанную статью.
     * @param {PublicApiPublicControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicControllerFindOne(requestParameters: PublicApiPublicControllerFindOneRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает список опубликованных статей.
     * @param {PublicApiPublicControllerPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicControllerPosts(requestParameters: PublicApiPublicControllerPostsRequest = {}, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicControllerPosts(requestParameters.pagination, requestParameters.sorting, requestParameters.title, requestParameters.categories, options).then((request) => request(this.axios, this.basePath));
    }
}
