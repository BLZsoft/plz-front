/* tslint:disable */
/* eslint-disable */
/**
 * Новосибирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: evist0@dblade.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BuildingCategoriesControllerFindOne404Response } from '../models';
// @ts-ignore
import { PartnersControllerFind400Response } from '../models';
// @ts-ignore
import { PartnersControllerFind403Response } from '../models';
// @ts-ignore
import { UpdateBuildingCategoriesOnBuildingDto } from '../models';
// @ts-ignore
import { UploadControllerUpload401Response } from '../models';
/**
 * CategoriesOnBuildingsApi - axios parameter creator
 * @export
 */
export const CategoriesOnBuildingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Добавляет категории филиалов указанному филиалу.
         * @param {string} buildingId 
         * @param {UpdateBuildingCategoriesOnBuildingDto} updateBuildingCategoriesOnBuildingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesOnBuildingsControllerCreate: async (buildingId: string, updateBuildingCategoriesOnBuildingDto: UpdateBuildingCategoriesOnBuildingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('buildingCategoriesOnBuildingsControllerCreate', 'buildingId', buildingId)
            // verify required parameter 'updateBuildingCategoriesOnBuildingDto' is not null or undefined
            assertParamExists('buildingCategoriesOnBuildingsControllerCreate', 'updateBuildingCategoriesOnBuildingDto', updateBuildingCategoriesOnBuildingDto)
            const localVarPath = `/buildings/{buildingId}/categories`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBuildingCategoriesOnBuildingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет категории указанного филиала.
         * @param {string} buildingId 
         * @param {UpdateBuildingCategoriesOnBuildingDto} updateBuildingCategoriesOnBuildingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesOnBuildingsControllerDelete: async (buildingId: string, updateBuildingCategoriesOnBuildingDto: UpdateBuildingCategoriesOnBuildingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('buildingCategoriesOnBuildingsControllerDelete', 'buildingId', buildingId)
            // verify required parameter 'updateBuildingCategoriesOnBuildingDto' is not null or undefined
            assertParamExists('buildingCategoriesOnBuildingsControllerDelete', 'updateBuildingCategoriesOnBuildingDto', updateBuildingCategoriesOnBuildingDto)
            const localVarPath = `/buildings/{buildingId}/categories`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBuildingCategoriesOnBuildingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesOnBuildingsApi - functional programming interface
 * @export
 */
export const CategoriesOnBuildingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesOnBuildingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Добавляет категории филиалов указанному филиалу.
         * @param {string} buildingId 
         * @param {UpdateBuildingCategoriesOnBuildingDto} updateBuildingCategoriesOnBuildingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesOnBuildingsControllerCreate(buildingId: string, updateBuildingCategoriesOnBuildingDto: UpdateBuildingCategoriesOnBuildingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesOnBuildingsControllerCreate(buildingId, updateBuildingCategoriesOnBuildingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаляет категории указанного филиала.
         * @param {string} buildingId 
         * @param {UpdateBuildingCategoriesOnBuildingDto} updateBuildingCategoriesOnBuildingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingCategoriesOnBuildingsControllerDelete(buildingId: string, updateBuildingCategoriesOnBuildingDto: UpdateBuildingCategoriesOnBuildingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingCategoriesOnBuildingsControllerDelete(buildingId, updateBuildingCategoriesOnBuildingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesOnBuildingsApi - factory interface
 * @export
 */
export const CategoriesOnBuildingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesOnBuildingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Добавляет категории филиалов указанному филиалу.
         * @param {CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesOnBuildingsControllerCreate(requestParameters: CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.buildingCategoriesOnBuildingsControllerCreate(requestParameters.buildingId, requestParameters.updateBuildingCategoriesOnBuildingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет категории указанного филиала.
         * @param {CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingCategoriesOnBuildingsControllerDelete(requestParameters: CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.buildingCategoriesOnBuildingsControllerDelete(requestParameters.buildingId, requestParameters.updateBuildingCategoriesOnBuildingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buildingCategoriesOnBuildingsControllerCreate operation in CategoriesOnBuildingsApi.
 * @export
 * @interface CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreateRequest
 */
export interface CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreate
     */
    readonly buildingId: string

    /**
     * 
     * @type {UpdateBuildingCategoriesOnBuildingDto}
     * @memberof CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreate
     */
    readonly updateBuildingCategoriesOnBuildingDto: UpdateBuildingCategoriesOnBuildingDto
}

/**
 * Request parameters for buildingCategoriesOnBuildingsControllerDelete operation in CategoriesOnBuildingsApi.
 * @export
 * @interface CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDeleteRequest
 */
export interface CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDelete
     */
    readonly buildingId: string

    /**
     * 
     * @type {UpdateBuildingCategoriesOnBuildingDto}
     * @memberof CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDelete
     */
    readonly updateBuildingCategoriesOnBuildingDto: UpdateBuildingCategoriesOnBuildingDto
}

/**
 * CategoriesOnBuildingsApi - object-oriented interface
 * @export
 * @class CategoriesOnBuildingsApi
 * @extends {BaseAPI}
 */
export class CategoriesOnBuildingsApi extends BaseAPI {
    /**
     * 
     * @summary Добавляет категории филиалов указанному филиалу.
     * @param {CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesOnBuildingsApi
     */
    public buildingCategoriesOnBuildingsControllerCreate(requestParameters: CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerCreateRequest, options?: AxiosRequestConfig) {
        return CategoriesOnBuildingsApiFp(this.configuration).buildingCategoriesOnBuildingsControllerCreate(requestParameters.buildingId, requestParameters.updateBuildingCategoriesOnBuildingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет категории указанного филиала.
     * @param {CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesOnBuildingsApi
     */
    public buildingCategoriesOnBuildingsControllerDelete(requestParameters: CategoriesOnBuildingsApiBuildingCategoriesOnBuildingsControllerDeleteRequest, options?: AxiosRequestConfig) {
        return CategoriesOnBuildingsApiFp(this.configuration).buildingCategoriesOnBuildingsControllerDelete(requestParameters.buildingId, requestParameters.updateBuildingCategoriesOnBuildingDto, options).then((request) => request(this.axios, this.basePath));
    }
}
