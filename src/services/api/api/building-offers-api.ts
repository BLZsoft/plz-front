/* tslint:disable */
/* eslint-disable */
/**
 * Новосибирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: evist0@dblade.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BuildingOfferEntity } from '../models';
// @ts-ignore
import { BuildingOffersControllerCreate404Response } from '../models';
// @ts-ignore
import { BuildingOffersControllerRemove404Response } from '../models';
// @ts-ignore
import { CreateBuildingOfferDto } from '../models';
// @ts-ignore
import { PartnersControllerFind400Response } from '../models';
// @ts-ignore
import { PartnersControllerFind403Response } from '../models';
// @ts-ignore
import { UpdateBuildingOfferDto } from '../models';
// @ts-ignore
import { UploadControllerUpload401Response } from '../models';
/**
 * BuildingOffersApi - axios parameter creator
 * @export
 */
export const BuildingOffersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создает новое предложение филиала.
         * @param {string} buildingId 
         * @param {CreateBuildingOfferDto} createBuildingOfferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingOffersControllerCreate: async (buildingId: string, createBuildingOfferDto: CreateBuildingOfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('buildingOffersControllerCreate', 'buildingId', buildingId)
            // verify required parameter 'createBuildingOfferDto' is not null or undefined
            assertParamExists('buildingOffersControllerCreate', 'createBuildingOfferDto', createBuildingOfferDto)
            const localVarPath = `/buildings/{buildingId}/offers`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBuildingOfferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет указанное предложение филиала.
         * @param {string} buildingId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingOffersControllerRemove: async (buildingId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('buildingOffersControllerRemove', 'buildingId', buildingId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buildingOffersControllerRemove', 'id', id)
            const localVarPath = `/buildings/{buildingId}/offers/{id}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет указанное предложение филиала.
         * @param {string} buildingId 
         * @param {string} id 
         * @param {UpdateBuildingOfferDto} updateBuildingOfferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingOffersControllerUpdate: async (buildingId: string, id: string, updateBuildingOfferDto: UpdateBuildingOfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('buildingOffersControllerUpdate', 'buildingId', buildingId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buildingOffersControllerUpdate', 'id', id)
            // verify required parameter 'updateBuildingOfferDto' is not null or undefined
            assertParamExists('buildingOffersControllerUpdate', 'updateBuildingOfferDto', updateBuildingOfferDto)
            const localVarPath = `/buildings/{buildingId}/offers/{id}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBuildingOfferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildingOffersApi - functional programming interface
 * @export
 */
export const BuildingOffersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildingOffersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создает новое предложение филиала.
         * @param {string} buildingId 
         * @param {CreateBuildingOfferDto} createBuildingOfferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingOffersControllerCreate(buildingId: string, createBuildingOfferDto: CreateBuildingOfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingOfferEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingOffersControllerCreate(buildingId, createBuildingOfferDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаляет указанное предложение филиала.
         * @param {string} buildingId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingOffersControllerRemove(buildingId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingOfferEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingOffersControllerRemove(buildingId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Обновляет указанное предложение филиала.
         * @param {string} buildingId 
         * @param {string} id 
         * @param {UpdateBuildingOfferDto} updateBuildingOfferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildingOffersControllerUpdate(buildingId: string, id: string, updateBuildingOfferDto: UpdateBuildingOfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingOfferEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildingOffersControllerUpdate(buildingId, id, updateBuildingOfferDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BuildingOffersApi - factory interface
 * @export
 */
export const BuildingOffersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildingOffersApiFp(configuration)
    return {
        /**
         * 
         * @summary Создает новое предложение филиала.
         * @param {BuildingOffersApiBuildingOffersControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingOffersControllerCreate(requestParameters: BuildingOffersApiBuildingOffersControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingOfferEntity> {
            return localVarFp.buildingOffersControllerCreate(requestParameters.buildingId, requestParameters.createBuildingOfferDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет указанное предложение филиала.
         * @param {BuildingOffersApiBuildingOffersControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingOffersControllerRemove(requestParameters: BuildingOffersApiBuildingOffersControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingOfferEntity> {
            return localVarFp.buildingOffersControllerRemove(requestParameters.buildingId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет указанное предложение филиала.
         * @param {BuildingOffersApiBuildingOffersControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildingOffersControllerUpdate(requestParameters: BuildingOffersApiBuildingOffersControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<BuildingOfferEntity> {
            return localVarFp.buildingOffersControllerUpdate(requestParameters.buildingId, requestParameters.id, requestParameters.updateBuildingOfferDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buildingOffersControllerCreate operation in BuildingOffersApi.
 * @export
 * @interface BuildingOffersApiBuildingOffersControllerCreateRequest
 */
export interface BuildingOffersApiBuildingOffersControllerCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof BuildingOffersApiBuildingOffersControllerCreate
     */
    readonly buildingId: string

    /**
     * 
     * @type {CreateBuildingOfferDto}
     * @memberof BuildingOffersApiBuildingOffersControllerCreate
     */
    readonly createBuildingOfferDto: CreateBuildingOfferDto
}

/**
 * Request parameters for buildingOffersControllerRemove operation in BuildingOffersApi.
 * @export
 * @interface BuildingOffersApiBuildingOffersControllerRemoveRequest
 */
export interface BuildingOffersApiBuildingOffersControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof BuildingOffersApiBuildingOffersControllerRemove
     */
    readonly buildingId: string

    /**
     * 
     * @type {string}
     * @memberof BuildingOffersApiBuildingOffersControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for buildingOffersControllerUpdate operation in BuildingOffersApi.
 * @export
 * @interface BuildingOffersApiBuildingOffersControllerUpdateRequest
 */
export interface BuildingOffersApiBuildingOffersControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof BuildingOffersApiBuildingOffersControllerUpdate
     */
    readonly buildingId: string

    /**
     * 
     * @type {string}
     * @memberof BuildingOffersApiBuildingOffersControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateBuildingOfferDto}
     * @memberof BuildingOffersApiBuildingOffersControllerUpdate
     */
    readonly updateBuildingOfferDto: UpdateBuildingOfferDto
}

/**
 * BuildingOffersApi - object-oriented interface
 * @export
 * @class BuildingOffersApi
 * @extends {BaseAPI}
 */
export class BuildingOffersApi extends BaseAPI {
    /**
     * 
     * @summary Создает новое предложение филиала.
     * @param {BuildingOffersApiBuildingOffersControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingOffersApi
     */
    public buildingOffersControllerCreate(requestParameters: BuildingOffersApiBuildingOffersControllerCreateRequest, options?: AxiosRequestConfig) {
        return BuildingOffersApiFp(this.configuration).buildingOffersControllerCreate(requestParameters.buildingId, requestParameters.createBuildingOfferDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет указанное предложение филиала.
     * @param {BuildingOffersApiBuildingOffersControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingOffersApi
     */
    public buildingOffersControllerRemove(requestParameters: BuildingOffersApiBuildingOffersControllerRemoveRequest, options?: AxiosRequestConfig) {
        return BuildingOffersApiFp(this.configuration).buildingOffersControllerRemove(requestParameters.buildingId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет указанное предложение филиала.
     * @param {BuildingOffersApiBuildingOffersControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingOffersApi
     */
    public buildingOffersControllerUpdate(requestParameters: BuildingOffersApiBuildingOffersControllerUpdateRequest, options?: AxiosRequestConfig) {
        return BuildingOffersApiFp(this.configuration).buildingOffersControllerUpdate(requestParameters.buildingId, requestParameters.id, requestParameters.updateBuildingOfferDto, options).then((request) => request(this.axios, this.basePath));
    }
}
