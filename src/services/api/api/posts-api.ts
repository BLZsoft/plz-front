/* tslint:disable */
/* eslint-disable */
/**
 * Новосибирск BMW Клуб API
 * API спецификация api.bmw-nsk.ru
 *
 * The version of the OpenAPI document: 1.0
 * Contact: evist0@dblade.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePostDto } from '../models';
// @ts-ignore
import { PaginationDto } from '../models';
// @ts-ignore
import { PartnersControllerFind400Response } from '../models';
// @ts-ignore
import { PartnersControllerFind403Response } from '../models';
// @ts-ignore
import { PostEntity } from '../models';
// @ts-ignore
import { PostPreviewEntity } from '../models';
// @ts-ignore
import { PostsControllerFind200Response } from '../models';
// @ts-ignore
import { PostsControllerFindOne404Response } from '../models';
// @ts-ignore
import { PostsSortingDto } from '../models';
// @ts-ignore
import { UpdatePostDto } from '../models';
// @ts-ignore
import { UploadControllerUpload401Response } from '../models';
/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создает новую статью.
         * @param {CreatePostDto} createPostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerCreate: async (createPostDto: CreatePostDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPostDto' is not null or undefined
            assertParamExists('postsControllerCreate', 'createPostDto', createPostDto)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает список статей.
         * @param {PaginationDto} [pagination] 
         * @param {PostsSortingDto} [sorting] 
         * @param {string} [title] 
         * @param {boolean} [published] 
         * @param {Array<string>} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerFind: async (pagination?: PaginationDto, sorting?: PostsSortingDto, title?: string, published?: boolean, categories?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['sorting'] = sorting;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возвращает указанную статью.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postsControllerFindOne', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет указанную статью.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postsControllerRemove', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет указанную статью.
         * @param {string} id 
         * @param {UpdatePostDto} updatePostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerUpdate: async (id: string, updatePostDto: UpdatePostDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postsControllerUpdate', 'id', id)
            // verify required parameter 'updatePostDto' is not null or undefined
            assertParamExists('postsControllerUpdate', 'updatePostDto', updatePostDto)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePostDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создает новую статью.
         * @param {CreatePostDto} createPostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postsControllerCreate(createPostDto: CreatePostDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPreviewEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postsControllerCreate(createPostDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает список статей.
         * @param {PaginationDto} [pagination] 
         * @param {PostsSortingDto} [sorting] 
         * @param {string} [title] 
         * @param {boolean} [published] 
         * @param {Array<string>} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postsControllerFind(pagination?: PaginationDto, sorting?: PostsSortingDto, title?: string, published?: boolean, categories?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsControllerFind200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postsControllerFind(pagination, sorting, title, published, categories, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возвращает указанную статью.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаляет указанную статью.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPreviewEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postsControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Обновляет указанную статью.
         * @param {string} id 
         * @param {UpdatePostDto} updatePostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postsControllerUpdate(id: string, updatePostDto: UpdatePostDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPreviewEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postsControllerUpdate(id, updatePostDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * 
         * @summary Создает новую статью.
         * @param {PostsApiPostsControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerCreate(requestParameters: PostsApiPostsControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PostPreviewEntity> {
            return localVarFp.postsControllerCreate(requestParameters.createPostDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает список статей.
         * @param {PostsApiPostsControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerFind(requestParameters: PostsApiPostsControllerFindRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostsControllerFind200Response> {
            return localVarFp.postsControllerFind(requestParameters.pagination, requestParameters.sorting, requestParameters.title, requestParameters.published, requestParameters.categories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возвращает указанную статью.
         * @param {PostsApiPostsControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerFindOne(requestParameters: PostsApiPostsControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<PostEntity> {
            return localVarFp.postsControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет указанную статью.
         * @param {PostsApiPostsControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerRemove(requestParameters: PostsApiPostsControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<PostPreviewEntity> {
            return localVarFp.postsControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет указанную статью.
         * @param {PostsApiPostsControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsControllerUpdate(requestParameters: PostsApiPostsControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PostPreviewEntity> {
            return localVarFp.postsControllerUpdate(requestParameters.id, requestParameters.updatePostDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postsControllerCreate operation in PostsApi.
 * @export
 * @interface PostsApiPostsControllerCreateRequest
 */
export interface PostsApiPostsControllerCreateRequest {
    /**
     * 
     * @type {CreatePostDto}
     * @memberof PostsApiPostsControllerCreate
     */
    readonly createPostDto: CreatePostDto
}

/**
 * Request parameters for postsControllerFind operation in PostsApi.
 * @export
 * @interface PostsApiPostsControllerFindRequest
 */
export interface PostsApiPostsControllerFindRequest {
    /**
     * 
     * @type {PaginationDto}
     * @memberof PostsApiPostsControllerFind
     */
    readonly pagination?: PaginationDto

    /**
     * 
     * @type {PostsSortingDto}
     * @memberof PostsApiPostsControllerFind
     */
    readonly sorting?: PostsSortingDto

    /**
     * 
     * @type {string}
     * @memberof PostsApiPostsControllerFind
     */
    readonly title?: string

    /**
     * 
     * @type {boolean}
     * @memberof PostsApiPostsControllerFind
     */
    readonly published?: boolean

    /**
     * 
     * @type {Array<string>}
     * @memberof PostsApiPostsControllerFind
     */
    readonly categories?: Array<string>
}

/**
 * Request parameters for postsControllerFindOne operation in PostsApi.
 * @export
 * @interface PostsApiPostsControllerFindOneRequest
 */
export interface PostsApiPostsControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof PostsApiPostsControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for postsControllerRemove operation in PostsApi.
 * @export
 * @interface PostsApiPostsControllerRemoveRequest
 */
export interface PostsApiPostsControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof PostsApiPostsControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for postsControllerUpdate operation in PostsApi.
 * @export
 * @interface PostsApiPostsControllerUpdateRequest
 */
export interface PostsApiPostsControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostsApiPostsControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdatePostDto}
     * @memberof PostsApiPostsControllerUpdate
     */
    readonly updatePostDto: UpdatePostDto
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 
     * @summary Создает новую статью.
     * @param {PostsApiPostsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsControllerCreate(requestParameters: PostsApiPostsControllerCreateRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).postsControllerCreate(requestParameters.createPostDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает список статей.
     * @param {PostsApiPostsControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsControllerFind(requestParameters: PostsApiPostsControllerFindRequest = {}, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).postsControllerFind(requestParameters.pagination, requestParameters.sorting, requestParameters.title, requestParameters.published, requestParameters.categories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возвращает указанную статью.
     * @param {PostsApiPostsControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsControllerFindOne(requestParameters: PostsApiPostsControllerFindOneRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).postsControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет указанную статью.
     * @param {PostsApiPostsControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsControllerRemove(requestParameters: PostsApiPostsControllerRemoveRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).postsControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет указанную статью.
     * @param {PostsApiPostsControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsControllerUpdate(requestParameters: PostsApiPostsControllerUpdateRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).postsControllerUpdate(requestParameters.id, requestParameters.updatePostDto, options).then((request) => request(this.axios, this.basePath));
    }
}
